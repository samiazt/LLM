import requests
from transformers import T5ForConditionalGeneration, T5Tokenizer

def get_news(api_key, query):
    url = "https://newsapi.org/v2/everything"
    headers = {
        'Authorization': api_key,
    }
    params = {
        'q': query,
        'language': 'en',
        'sortBy': 'relevancy',
    }
    response = requests.get(url, headers=headers, params=params)
    data = response.json()
    return data['articles']

def summarize_news(articles):
    model = T5ForConditionalGeneration.from_pretrained('t5-base')
    tokenizer = T5Tokenizer.from_pretrained('t5-base')

    summaries = []
    for article in articles:
        if article['content']:  # Vérifiez s'il y a du contenu à résumer
            inputs = tokenizer.encode("summarize: " + article['content'], return_tensors='pt', max_length=512, truncation=True)
            outputs = model.generate(inputs, max_length=150, min_length=40, length_penalty=2.0, num_beams=4, early_stopping=True)
            summary = tokenizer.decode(outputs[0], skip_special_tokens=True)
            summaries.append({
                'title': article['title'],
                'url': article['url'],
                'summary': summary
            })
    return summaries

# Utilisez votre clé API ici
api_key = 'e2d041a0643745c7b5fee7f5a2db32fb'
query = 'climate change'  # Remplacez ceci par le sujet des nouvelles que vous voulez résumer
articles = get_news(api_key, query)
summarized_articles = summarize_news(articles)

# Imprimez les résumés des articles avec le titre et le lien
for i, article in enumerate(summarized_articles):
    print(f"Title: {article['title']}")
    print(f"URL: {article['url']}")
    print(f"Summary: {article['summary']}\n")
